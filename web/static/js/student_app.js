
let currentAgent = 'sage';
let currentSessionId = generateSessionId();
let conversationHistory = {};
let chatSessions = JSON.parse(localStorage.getItem('studentChatSessions') || '[]');
let currentChatIndex = -1;

// Get student info from URL parameters
const urlParams = new URLSearchParams(window.location.search);
const studentId = urlParams.get('id') || sessionStorage.getItem('student_id');
const studentName = urlParams.get('name') || sessionStorage.getItem('student_name');

if (!studentId || !studentName) {
    window.location.href = '/student-login';
}

// Dynamic help content based on agent, subject, and activity
const dynamicHelp = {
    'sage': {
        'math': {
            'homework': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Math Homework Help',
                samples: [
                    '‚Ä¢ "What is 25 + 47?"',
                    '‚Ä¢ "Help me solve: 2x + 5 = 15"',
                    '‚Ä¢ "If a conch salad costs $8 BSD and I buy 3, how much do I spend?"',
                    '‚Ä¢ "What\'s the area of Nassau if it\'s 21 miles long and 7 miles wide?"',
                    '‚Ä¢ "Check my work: 12 √ó 8 = 96"',
                    '‚Ä¢ "I need help with fractions"'
                ]
            },
            'study': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Math Study Session',
                samples: [
                    '‚Ä¢ "Explain fractions using Bahamian examples"',
                    '‚Ä¢ "Give me study tips for my BGCSE math exam"',
                    '‚Ä¢ "Practice problems for division please"',
                    '‚Ä¢ "I don\'t understand fractions at all"',
                    '‚Ä¢ "Create a study plan for geometry"',
                    '‚Ä¢ "Help me memorize the multiplication tables"'
                ]
            },
            'quiz': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Math Practice Quiz',
                samples: [
                    '‚Ä¢ "Quiz me on multiplication tables"',
                    '‚Ä¢ "Test me on fractions"',
                    '‚Ä¢ "Give me 5 algebra problems"',
                    '‚Ä¢ "Quiz me on area and perimeter"',
                    '‚Ä¢ "Practice questions for my math test"',
                    '‚Ä¢ "Random math problems please"'
                ]
            }
        },
        'science': {
            'homework': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Science Homework Help',
                samples: [
                    '‚Ä¢ "What is photosynthesis?"',
                    '‚Ä¢ "Explain how coral reefs work in the Bahamas"',
                    '‚Ä¢ "Help me with my biology worksheet"',
                    '‚Ä¢ "What animals live in Bahamian mangroves?"',
                    '‚Ä¢ "How does climate change affect our islands?"',
                    '‚Ä¢ "Explain the water cycle"'
                ]
            },
            'study': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Science Study Session',
                samples: [
                    '‚Ä¢ "Why do hurricanes form in our region?"',
                    '‚Ä¢ "Study guide for marine biology"',
                    '‚Ä¢ "Help me understand ecosystems"',
                    '‚Ä¢ "Review photosynthesis with me"',
                    '‚Ä¢ "Explain Bahamian wildlife adaptations"',
                    '‚Ä¢ "Study tips for my science exam"'
                ]
            },
            'quiz': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Science Practice Quiz',
                samples: [
                    '‚Ä¢ "Quiz me on marine biology"',
                    '‚Ä¢ "Test my knowledge about coral reefs"',
                    '‚Ä¢ "Practice questions on ecosystems"',
                    '‚Ä¢ "Quiz me about Bahamian wildlife"',
                    '‚Ä¢ "Science vocabulary test please"',
                    '‚Ä¢ "Random science questions"'
                ]
            }
        },
        'history': {
            'homework': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - History Homework Help',
                samples: [
                    '‚Ä¢ "What is the capital of The Bahamas?"',
                    '‚Ä¢ "When did we gain independence?"',
                    '‚Ä¢ "Who were the Lucayans?"',
                    '‚Ä¢ "Help me with my history assignment"',
                    '‚Ä¢ "How many islands are in The Bahamas?"',
                    '‚Ä¢ "Explain Bahamian government structure"'
                ]
            },
            'study': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - History Study Session',
                samples: [
                    '‚Ä¢ "Tell me about Junkanoo festival"',
                    '‚Ä¢ "Study guide for Bahamian independence"',
                    '‚Ä¢ "Review colonial history with me"',
                    '‚Ä¢ "Help me understand our government"',
                    '‚Ä¢ "Timeline of important Bahamian events"',
                    '‚Ä¢ "Study tips for history exam"'
                ]
            },
            'quiz': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - History Practice Quiz',
                samples: [
                    '‚Ä¢ "Quiz me on Bahamian history"',
                    '‚Ä¢ "Test me on independence facts"',
                    '‚Ä¢ "Practice questions about Lucayans"',
                    '‚Ä¢ "Quiz me on Junkanoo traditions"',
                    '‚Ä¢ "History dates and events test"',
                    '‚Ä¢ "Random Bahamian history questions"'
                ]
            }
        },
        'english': {
            'homework': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - English Homework Help',
                samples: [
                    '‚Ä¢ "Help me with my essay about coral reefs"',
                    '‚Ä¢ "Check my grammar in this paragraph"',
                    '‚Ä¢ "What does this poem mean?"',
                    '‚Ä¢ "Help me write a story about Nassau"',
                    '‚Ä¢ "Explain this reading assignment"',
                    '‚Ä¢ "Help with my book report"'
                ]
            },
            'study': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - English Study Session',
                samples: [
                    '‚Ä¢ "Study tips for reading comprehension"',
                    '‚Ä¢ "Help me improve my writing"',
                    '‚Ä¢ "Practice analyzing poems"',
                    '‚Ä¢ "Vocabulary building exercises"',
                    '‚Ä¢ "Grammar review session"',
                    '‚Ä¢ "Essay writing techniques"'
                ]
            },
            'quiz': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - English Practice Quiz',
                samples: [
                    '‚Ä¢ "Quiz me on vocabulary words"',
                    '‚Ä¢ "Test my grammar knowledge"',
                    '‚Ä¢ "Practice reading comprehension"',
                    '‚Ä¢ "Quiz me on literary terms"',
                    '‚Ä¢ "Spelling test please"',
                    '‚Ä¢ "Random English questions"'
                ]
            }
        },
        'bahamas studies': {
            'homework': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Bahamas Studies Help',
                samples: [
                    '‚Ä¢ "Research project on Out Islands"',
                    '‚Ä¢ "Help me understand Bahamian economy"',
                    '‚Ä¢ "What makes Bahamian culture unique?"',
                    '‚Ä¢ "Assignment about local government"',
                    '‚Ä¢ "Tourism impact on our islands"',
                    '‚Ä¢ "Bahamian art and music project"'
                ]
            },
            'study': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Bahamas Studies Session',
                samples: [
                    '‚Ä¢ "Study guide for Bahamian geography"',
                    '‚Ä¢ "Review our cultural traditions"',
                    '‚Ä¢ "Learn about local economy"',
                    '‚Ä¢ "Understanding our dialect and language"',
                    '‚Ä¢ "Environmental challenges we face"',
                    '‚Ä¢ "Study tips for Bahamas Studies exam"'
                ]
            },
            'quiz': {
                title: 'üßô‚Äç‚ôÇÔ∏è Sage - Bahamas Studies Quiz',
                samples: [
                    '‚Ä¢ "Quiz me on Bahamian geography"',
                    '‚Ä¢ "Test my knowledge of local culture"',
                    '‚Ä¢ "Practice questions about our economy"',
                    '‚Ä¢ "Quiz me on Out Island facts"',
                    '‚Ä¢ "Bahamian traditions and customs test"',
                    '‚Ä¢ "Random Bahamas Studies questions"'
                ]
            }
        }
    },
    'echo': {
        'english': {
            'homework': {
                title: 'üó£Ô∏è Echo - Reading Homework Help',
                samples: [
                    '‚Ä¢ "Help me understand this text about coral reefs"',
                    '‚Ä¢ "What does \'archipelago\' mean?"',
                    '‚Ä¢ "Summarize this paragraph for me"',
                    '‚Ä¢ "Create questions about this passage"',
                    '‚Ä¢ "Help me analyze this poem"',
                    '‚Ä¢ "Explain this story\'s theme"'
                ]
            },
            'study': {
                title: 'üó£Ô∏è Echo - Reading Study Session',
                samples: [
                    '‚Ä¢ "Improve my reading comprehension"',
                    '‚Ä¢ "Practice reading strategies"',
                    '‚Ä¢ "Help me understand difficult texts"',
                    '‚Ä¢ "Vocabulary building exercises"',
                    '‚Ä¢ "Reading tips for my exam"',
                    '‚Ä¢ "Make this text easier to read"'
                ]
            },
            'quiz': {
                title: 'üó£Ô∏è Echo - Reading Comprehension Quiz',
                samples: [
                    '‚Ä¢ "Test my comprehension"',
                    '‚Ä¢ "Quiz me on vocabulary"',
                    '‚Ä¢ "Reading comprehension practice"',
                    '‚Ä¢ "Test my understanding of this text"',
                    '‚Ä¢ "Practice answering reading questions"',
                    '‚Ä¢ "Comprehension skills test"'
                ]
            }
        },
        'history': {
            'homework': {
                title: 'üó£Ô∏è Echo - History Reading Help',
                samples: [
                    '‚Ä¢ "Help me understand this history text"',
                    '‚Ä¢ "Summarize this chapter on independence"',
                    '‚Ä¢ "What are the key points about Lucayans?"',
                    '‚Ä¢ "Break down this historical document"',
                    '‚Ä¢ "Explain this timeline to me"',
                    '‚Ä¢ "Help me read this primary source"'
                ]
            },
            'study': {
                title: 'üó£Ô∏è Echo - History Reading Study',
                samples: [
                    '‚Ä¢ "Reading strategies for history texts"',
                    '‚Ä¢ "Help me take better notes from reading"',
                    '‚Ä¢ "Understand historical vocabulary"',
                    '‚Ä¢ "Practice reading historical documents"',
                    '‚Ä¢ "Improve comprehension of timelines"',
                    '‚Ä¢ "Reading tips for history exam"'
                ]
            },
            'quiz': {
                title: 'üó£Ô∏è Echo - History Reading Quiz',
                samples: [
                    '‚Ä¢ "Test my understanding of this chapter"',
                    '‚Ä¢ "Quiz me on historical terms"',
                    '‚Ä¢ "Reading comprehension on independence"',
                    '‚Ä¢ "Test my knowledge from this text"',
                    '‚Ä¢ "Practice questions on this reading"',
                    '‚Ä¢ "Historical reading comprehension test"'
                ]
            }
        },
        'science': {
            'homework': {
                title: 'üó£Ô∏è Echo - Science Reading Help',
                samples: [
                    '‚Ä¢ "Help me understand this marine biology text"',
                    '‚Ä¢ "Summarize this chapter on ecosystems"',
                    '‚Ä¢ "What are the main ideas about coral reefs?"',
                    '‚Ä¢ "Break down this science article"',
                    '‚Ä¢ "Explain these scientific terms"',
                    '‚Ä¢ "Help me read this research study"'
                ]
            },
            'study': {
                title: 'üó£Ô∏è Echo - Science Reading Study',
                samples: [
                    '‚Ä¢ "Reading strategies for science texts"',
                    '‚Ä¢ "Help me understand scientific vocabulary"',
                    '‚Ä¢ "Practice reading research papers"',
                    '‚Ä¢ "Improve comprehension of experiments"',
                    '‚Ä¢ "Reading tips for science exam"',
                    '‚Ä¢ "Better note-taking from science texts"'
                ]
            },
            'quiz': {
                title: 'üó£Ô∏è Echo - Science Reading Quiz',
                samples: [
                    '‚Ä¢ "Test my understanding of this science chapter"',
                    '‚Ä¢ "Quiz me on scientific terms"',
                    '‚Ä¢ "Reading comprehension on marine life"',
                    '‚Ä¢ "Test my knowledge from this article"',
                    '‚Ä¢ "Practice questions on this research"',
                    '‚Ä¢ "Scientific reading comprehension test"'
                ]
            }
        }
    },
    'lucaya': {
        'academic research': {
            'find sources': {
                title: 'üîç Lucaya - Finding Research Sources',
                samples: [
                    '‚Ä¢ "Find sources about coral bleaching"',
                    '‚Ä¢ "Research Bahamian independence"',
                    '‚Ä¢ "Sources for my essay on marine conservation"',
                    '‚Ä¢ "Academic articles about climate change"',
                    '‚Ä¢ "Reliable sources on Junkanoo history"',
                    '‚Ä¢ "Find research on Out Island economics"'
                ]
            },
            'create outline': {
                title: 'üîç Lucaya - Creating Research Outlines',
                samples: [
                    '‚Ä¢ "Help me outline my essay on coral reefs"',
                    '‚Ä¢ "Create structure for independence research"',
                    '‚Ä¢ "Outline for marine biology project"',
                    '‚Ä¢ "Organize my research on climate change"',
                    '‚Ä¢ "Structure my paper on Bahamian culture"',
                    '‚Ä¢ "Help organize my findings"'
                ]
            },
            'evaluate sources': {
                title: 'üîç Lucaya - Evaluating Sources',
                samples: [
                    '‚Ä¢ "Is this source reliable for my research?"',
                    '‚Ä¢ "Help me evaluate these websites"',
                    '‚Ä¢ "Check if this article is credible"',
                    '‚Ä¢ "Compare these different sources"',
                    '‚Ä¢ "Which sources are best for my topic?"',
                    '‚Ä¢ "Help me fact-check this information"'
                ]
            },
            'citation help': {
                title: 'üîç Lucaya - Citation and Bibliography',
                samples: [
                    '‚Ä¢ "How do I cite this website?"',
                    '‚Ä¢ "Create a bibliography for my sources"',
                    '‚Ä¢ "Help me format these citations"',
                    '‚Ä¢ "MLA format for this article"',
                    '‚Ä¢ "Add this source to my references"',
                    '‚Ä¢ "Check my citation format"'
                ]
            },
            'topic exploration': {
                title: 'üîç Lucaya - Topic Exploration',
                samples: [
                    '‚Ä¢ "Explore the topic of marine conservation"',
                    '‚Ä¢ "What are the main aspects of Junkanoo?"',
                    '‚Ä¢ "Help me understand climate change impacts"',
                    '‚Ä¢ "Explore Bahamian economic development"',
                    '‚Ä¢ "Research angles for my project"',
                    '‚Ä¢ "Brainstorm research questions"'
                ]
            },
            'literature review': {
                title: 'üîç Lucaya - Literature Review Help',
                samples: [
                    '‚Ä¢ "Help me review research on coral reefs"',
                    '‚Ä¢ "Summarize key studies on hurricanes"',
                    '‚Ä¢ "Literature review on tourism impacts"',
                    '‚Ä¢ "Compare different research findings"',
                    '‚Ä¢ "Synthesize these academic sources"',
                    '‚Ä¢ "What do experts say about this topic?"'
                ]
            }
        },
        'history': {
            'find sources': {
                title: 'üîç Lucaya - History Research Sources',
                samples: [
                    '‚Ä¢ "Find primary sources on Bahamian independence"',
                    '‚Ä¢ "Research about Lucayan civilization"',
                    '‚Ä¢ "Sources for colonial period study"',
                    '‚Ä¢ "Historical documents about slavery"',
                    '‚Ä¢ "Research on piracy in Bahamas"',
                    '‚Ä¢ "Find archives about Out Island history"'
                ]
            },
            'create outline': {
                title: 'üîç Lucaya - History Research Outline',
                samples: [
                    '‚Ä¢ "Outline for independence timeline project"',
                    '‚Ä¢ "Structure my paper on Lucayan culture"',
                    '‚Ä¢ "Organize research on colonial history"',
                    '‚Ä¢ "Outline for Junkanoo history essay"',
                    '‚Ä¢ "Structure study of piracy era"',
                    '‚Ä¢ "Organize findings on slavery period"'
                ]
            }
        },
        'government': {
            'find sources': {
                title: 'üîç Lucaya - Government Research',
                samples: [
                    '‚Ä¢ "Research Bahamian parliamentary system"',
                    '‚Ä¢ "Find sources on local government structure"',
                    '‚Ä¢ "Constitutional research for my project"',
                    '‚Ä¢ "Sources about political parties"',
                    '‚Ä¢ "Research election processes"',
                    '‚Ä¢ "Find information on prime ministers"'
                ]
            }
        }
    }
};

document.addEventListener('DOMContentLoaded', function() {
    // Display student welcome message
    document.getElementById('student-welcome').textContent = `Welcome, ${studentName}!`;
    
    // Set up agent switching
    document.getElementById('agent-select').addEventListener('change', function() {
        switchAgent(this.value);
    });
    
    // Set up help content updates when subject or task changes
    document.getElementById('subject-select').addEventListener('change', function() {
        updateTaskOptions();
        updateAgentHelp();
    });
    
    document.getElementById('task-select').addEventListener('change', function() {
        updateAgentHelp();
    });
    
    // Set up send button
    document.getElementById('send-button').addEventListener('click', sendMessage);
    document.getElementById('message-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // Auto-expand textarea
    document.getElementById('message-input').addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    });
    
    // Set up new chat button
    document.getElementById('new-chat-btn').addEventListener('click', startNewChat);
    
    // Initialize
    updateTaskOptions();
    
    // Wait a bit for dropdowns to be populated before updating help
    setTimeout(() => {
        updateAgentHelp();
    }, 100);
    
    loadChatHistorySidebar();
    
    if (chatSessions.length === 0) {
        startNewChat();
    } else {
        loadChatSession(0);
    }
});

function generateSessionId() {
    return `student-${studentId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

function switchAgent(agentName) {
    // Save current chat session before switching
    if (currentChatIndex >= 0) {
        saveChatSession();
    }
    
    currentAgent = agentName;
    
    // Update task options for the new agent
    updateTaskOptions();
    
    // Update help content
    updateAgentHelp();
    
    // Start a new chat for the new agent
    startNewChat();
}

function updateTaskOptions() {
    const taskSelect = document.getElementById('task-select');
    const subjectSelect = document.getElementById('subject-select');
    
    // Clear current options
    taskSelect.innerHTML = '';
    
    if (currentAgent === 'lucaya') {
        // Research-specific tasks
        const researchTasks = [
            { value: 'find sources', text: 'Find Sources' },
            { value: 'create outline', text: 'Create Outline' },
            { value: 'evaluate sources', text: 'Evaluate Sources' },
            { value: 'citation help', text: 'Citation Help' },
            { value: 'topic exploration', text: 'Topic Exploration' },
            { value: 'literature review', text: 'Literature Review' }
        ];
        
        researchTasks.forEach(task => {
            const option = document.createElement('option');
            option.value = task.value;
            option.textContent = task.text;
            taskSelect.appendChild(option);
        });
        
        // Update subject options for research
        subjectSelect.innerHTML = '';
        const researchSubjects = [
            { value: 'academic research', text: 'Academic Research' },
            { value: 'history', text: 'History' },
            { value: 'government', text: 'Government' },
            { value: 'science', text: 'Science' }
        ];
        
        researchSubjects.forEach(subject => {
            const option = document.createElement('option');
            option.value = subject.value;
            option.textContent = subject.text;
            subjectSelect.appendChild(option);
        });
        
    } else {
        // Regular learning tasks
        const regularTasks = [
            { value: 'homework', text: 'Homework Help' },
            { value: 'study', text: 'Study Session' },
            { value: 'quiz', text: 'Practice Quiz' },
            { value: 'review', text: 'Review' }
        ];
        
        regularTasks.forEach(task => {
            const option = document.createElement('option');
            option.value = task.value;
            option.textContent = task.text;
            taskSelect.appendChild(option);
        });
        
        // Reset to standard subjects
        subjectSelect.innerHTML = '';
        const standardSubjects = [
            { value: 'math', text: 'Mathematics' },
            { value: 'science', text: 'Science' },
            { value: 'english', text: 'English' },
            { value: 'history', text: 'History' },
            { value: 'bahamas studies', text: 'Bahamas Studies' }
        ];
        
        standardSubjects.forEach(subject => {
            const option = document.createElement('option');
            option.value = subject.value;
            option.textContent = subject.text;
            subjectSelect.appendChild(option);
        });
    }
}

function updateAgentHelp() {
    const helpContent = document.getElementById('help-content');
    const subject = document.getElementById('subject-select').value;
    const task = document.getElementById('task-select').value;
    
    console.log('[DEBUG] updateAgentHelp called with:', { currentAgent, subject, task });
    
    // Get specific help content based on agent, subject, and task
    let help = null;
    
    if (dynamicHelp[currentAgent] && 
        dynamicHelp[currentAgent][subject] && 
        dynamicHelp[currentAgent][subject][task]) {
        help = dynamicHelp[currentAgent][subject][task];
        console.log('[DEBUG] Found specific help content');
    } else if (dynamicHelp[currentAgent] && dynamicHelp[currentAgent][subject]) {
        // Fallback to first available task for this subject
        const availableTasks = Object.keys(dynamicHelp[currentAgent][subject]);
        if (availableTasks.length > 0) {
            help = dynamicHelp[currentAgent][subject][availableTasks[0]];
            console.log('[DEBUG] Using fallback help content for task:', availableTasks[0]);
        }
    } else {
        // Generic fallback
        help = {
            title: `${currentAgent.charAt(0).toUpperCase() + currentAgent.slice(1)} - ${subject.charAt(0).toUpperCase() + subject.slice(1)} ${task.charAt(0).toUpperCase() + task.slice(1)}`,
            samples: [
                '‚Ä¢ "Ask me anything about this subject"',
                '‚Ä¢ "Help me understand this topic"',
                '‚Ä¢ "I need assistance with my work"',
                '‚Ä¢ "Can you explain this concept?"',
                '‚Ä¢ "Practice questions please"'
            ]
        };
        console.log('[DEBUG] Using generic fallback help content');
    }
    
    if (helpContent && help) {
        helpContent.innerHTML = `
            <h4>${help.title}</h4>
            <div class="help-samples">
                ${help.samples.map(sample => `<div class="sample-text">${sample}</div>`).join('')}
            </div>
        `;
        
        console.log('[DEBUG] Help content updated successfully');
        
        // Add click handlers for sample texts
        setTimeout(() => {
            document.querySelectorAll('.sample-text').forEach(sample => {
                sample.addEventListener('click', function() {
                    const text = this.textContent.replace('‚Ä¢ "', '').replace('"', '');
                    const messageInput = document.getElementById('message-input');
                    if (messageInput) {
                        messageInput.value = text;
                        messageInput.focus();
                    }
                });
            });
        }, 50);
    } else {
        console.error('[ERROR] helpContent element or help data not found');
    }
}

function startNewChat() {
    // Save current chat if it exists
    if (currentChatIndex >= 0) {
        saveChatSession();
    }

    // Create new chat session
    const newChat = {
        id: generateSessionId(),
        agent: currentAgent,
        title: 'New Chat',
        lastMessage: '',
        timestamp: new Date().toISOString(),
        messages: []
    };

    chatSessions.unshift(newChat);
    currentChatIndex = 0;
    currentSessionId = newChat.id;

    // Clear chat window
    const chatWindow = document.getElementById('chat-window');
    chatWindow.innerHTML = '';

    // Show welcome message
    const greetings = {
        'sage': `Hello ${studentName}! I'm Sage, your tutor. What would you like to learn today?`,
        'echo': `Hi ${studentName}! I'm Echo, your reading coach. Ready to improve your comprehension?`,
        'lucaya': `Welcome ${studentName}! I'm Lucaya, your research assistant. What topic shall we explore?`
    };
    
    addMessage(greetings[currentAgent], 'bot');

    // Update sidebar
    loadChatHistorySidebar();
    
    // New chat started successfully
}

function loadChatHistorySidebar() {
    const historyList = document.getElementById('chat-history-list');
    historyList.innerHTML = '';

    chatSessions.forEach((session, index) => {
        const historyItem = document.createElement('div');
        historyItem.className = `chat-history-item ${index === currentChatIndex ? 'active' : ''}`;
        historyItem.onclick = () => loadChatSession(index);
        
        historyItem.innerHTML = `
            <div class="chat-title">${session.title}</div>
            <div class="chat-preview">${session.lastMessage || 'New conversation'}</div>
            <div class="chat-meta">${session.agent} ‚Ä¢ ${new Date(session.timestamp).toLocaleDateString()}</div>
        `;
        
        historyList.appendChild(historyItem);
    });
}

function loadChatSession(index) {
    // Save current session first
    if (currentChatIndex >= 0) {
        saveChatSession();
    }
    
    currentChatIndex = index;
    const session = chatSessions[index];
    currentSessionId = session.id;
    currentAgent = session.agent;
    
    // Update agent selector
    document.getElementById('agent-select').value = currentAgent;
    updateAgentHelp();
    
    // Load messages
    const chatWindow = document.getElementById('chat-window');
    chatWindow.innerHTML = '';
    
    session.messages.forEach(msg => {
        const messageDiv = document.createElement('div');
        messageDiv.className = msg.className;
        messageDiv.innerHTML = msg.content;
        chatWindow.appendChild(messageDiv);
    });
    
    // Update sidebar active state
    loadChatHistorySidebar();
    
    chatWindow.scrollTop = chatWindow.scrollHeight;
}

function saveChatSession() {
    if (currentChatIndex >= 0) {
        const chatWindow = document.getElementById('chat-window');
        const messages = Array.from(chatWindow.children);
        
        chatSessions[currentChatIndex].messages = messages.map(msg => ({
            content: msg.innerHTML,
            className: msg.className
        }));
        
        // Update title and last message
        if (messages.length > 0) {
            const lastUserMessage = messages.reverse().find(msg => msg.className.includes('user'));
            if (lastUserMessage) {
                const text = lastUserMessage.textContent || lastUserMessage.innerText;
                chatSessions[currentChatIndex].title = text.substring(0, 30) + (text.length > 30 ? '...' : '');
                chatSessions[currentChatIndex].lastMessage = text.substring(0, 50) + (text.length > 50 ? '...' : '');
            }
        }
        
        chatSessions[currentChatIndex].timestamp = new Date().toISOString();
        localStorage.setItem('studentChatSessions', JSON.stringify(chatSessions));
    }
}

function saveConversationState(agent) {
    const chatWindow = document.getElementById('chat-window');
    const messages = Array.from(chatWindow.children);

    conversationHistory[agent] = messages.map(msg => ({
        content: msg.innerHTML,
        className: msg.className
    }));

    // Conversation state saved
}

async function loadAgentSession(agent) {
    const chatWindow = document.getElementById('chat-window');

    // Check if we have local conversation history first
    if (conversationHistory[agent] && conversationHistory[agent].length > 0) {
        // Clear and restore from local storage
        chatWindow.innerHTML = '';
        conversationHistory[agent].forEach(msg => {
            const messageDiv = document.createElement('div');
            messageDiv.className = msg.className;
            messageDiv.innerHTML = msg.content;
            chatWindow.appendChild(messageDiv);
        });

        // Messages loaded from local history
    }

    // Scroll to bottom
    chatWindow.scrollTop = chatWindow.scrollHeight;
}

function sendMessage() {
    const messageInput = document.getElementById('message-input');
    const message = messageInput.value.trim();
    
    console.log('[DEBUG] sendMessage called with message:', message);
    
    if (!message || message.length === 0) {
        addMessage('üìù Please enter a message before sending!', 'error');
        messageInput.focus();
        return;
    }
    
    // Student-specific limitations
    if (message.length > 300) {
        addMessage('üìù Please keep your questions shorter (under 300 characters) so I can help you better!', 'error');
        return;
    }
    
    // Prevent button spamming
    const sendButton = document.getElementById('send-button');
    if (sendButton && sendButton.disabled) {
        console.log('[DEBUG] Send button already disabled, preventing duplicate send');
        return;
    }
    if (sendButton) {
        sendButton.disabled = true;
    }
    
    const subject = document.getElementById('subject-select').value;
    const task = document.getElementById('task-select').value;
    
    // Add user message to chat
    addMessage(message, 'user');
    messageInput.value = '';
    messageInput.style.height = 'auto';
    
    // Send to agent with student context
    const payload = {
        message: message,
        subject: subject,
        task: task,
        session_id: currentSessionId,
        student_id: studentId,
        student_name: studentName,
        user_type: 'student'
    };
    
    fetch(`/api/${currentAgent}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
    })
    .then(response => response.json())
    .then(data => {
        if (data.response) {
            addMessage(data.response, 'bot');
        } else {
            addMessage('Sorry, I had trouble understanding that. Please try again.', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        addMessage('Sorry, I encountered an error. Please try again.', 'error');
    })
    .finally(() => {
        // Re-enable send button
        if (sendButton) {
            sendButton.disabled = false;
        }
        
        // Save session after each message
        saveChatSession();
    });
}

function addMessage(text, type) {
    const chatWindow = document.getElementById('chat-window');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    
    // Format message text (convert ** to bold, handle line breaks)
    const formattedText = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                             .replace(/\n/g, '<br>');
    
    messageDiv.innerHTML = formattedText;
    chatWindow.appendChild(messageDiv);
    chatWindow.scrollTop = chatWindow.scrollHeight;
}

function logout() {
    // Save current session before logout
    saveChatSession();
    sessionStorage.clear();
    localStorage.removeItem('studentChatSessions');
    window.location.href = '/student-login';
}
